{"version":3,"sources":["themes/theme.js","themes/global.js","Main.js","Circle.js","components/StyledLink.js","themes/Header.js","themes/PublicLayout.js","Views/Home.js","Demos/Demos.js","Views/DemoList.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["darkTheme","body","text","lightText","GlobalStyle","createGlobalStyle","Wrapper","styled","div","Circle","ref","useRef","useEffect","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","requestID","i","render","clearRect","beginPath","arc","Math","abs","cos","PI","fillStyle","fill","font","textAlign","fillText","requestAnimationFrame","cancelAnimationFrame","style","position","top","left","StyledLink","Link","props","theme","withTheme","AntHeader","Layout","Header","StyledHeader","to","className","PublicLayout","children","headerProps","demos","title","href","Title","CardWrapper","routes","path","component","route","renderRoutes","exact","gutter","map","span","key","bordered","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAaA,EAAY,CACvBC,KAAM,UAENC,KAAM,UACNC,UAAW,W,8QCFN,IAAMC,EAAcC,YAAH,K,qFCExB,IAAMC,EAAUC,IAAOC,IAAV,KCFAC,EAAS,SAAC,GAAc,IAAZP,EAAW,EAAXA,KACnBQ,EAAMC,mBAqCV,OApCAC,qBAAU,WACR,IAAIC,EAASH,EAAII,QACbC,EAAMF,EAAOG,WAAW,MAE5BH,EAAOI,MAAQC,OAAOC,WACtBN,EAAOO,OAASF,OAAOG,YAEvB,IAAIC,EACFC,EAAI,EAuBN,OAtBe,SAATC,IACJT,EAAIU,UAAU,EAAG,EAAGZ,EAAOI,MAAOJ,EAAOO,QACzCL,EAAIW,YACJX,EAAIY,IACFd,EAAOI,MAAQ,EACfJ,EAAOO,OAAS,EACfP,EAAOI,MAAQ,IAAOW,KAAKC,IAAID,KAAKE,IAAIP,IACzC,EACA,EAAIK,KAAKG,IAEXhB,EAAIiB,UAAY,UAChBjB,EAAIkB,OACJlB,EAAImB,KAAO,mBACXnB,EAAIiB,UAAY,UAChBjB,EAAIoB,UAAY,SAChBpB,EAAIqB,SAASlC,EAAMW,EAAOI,MAAQ,EAAGJ,EAAOO,OAAS,GACrDL,EAAIqB,SAAS,GAAIvB,EAAOI,MAAQ,EAAGJ,EAAOO,OAAS,EAAI,IAEvDG,GAAK,KACLD,EAAYe,sBAAsBb,GAEpCA,GACO,WACLc,qBAAqBhB,OAKvB,oCACE,4BACEZ,IAAKA,EACL6B,MAAO,CAAEC,SAAU,WAAYC,IAAK,MAAOC,KAAM,W,kPCxCzD,IAAMC,EAAapC,YAAOqC,IAAPrC,CAAH,KAEL,SAACsC,GAAD,OAAWA,EAAMC,MAAM5C,QASrB,SAAC2C,GAAD,OAAWA,EAAMC,MAAM3C,aAIrB4C,eAAU,SAACF,GAAD,OAAW,kBAACF,EAAeE,M,uiBCdpCG,EAAcC,IAAtBC,OAEFC,EAAe5C,YAAOyC,EAAPzC,CAAH,KAwBZD,EAAUC,IAAOC,IAAV,KAKA0C,EAAS,SAAC,GAAkB,IAAhBhD,EAAe,EAAfA,KAAMkD,EAAS,EAATA,GAC7B,OACE,kBAAC,EAAD,KACE,kBAACD,EAAD,KACE,wBAAIE,UAAU,cAAd,YACA,kBAAC,EAAD,CAAYA,UAAU,aAAaD,GAAIA,GACpClD,O,qNCtCX,IAAMI,EAAUC,IAAOC,IAAV,KAqBE8C,EATM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAChC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAWA,GACZ,yBAAKH,UAAU,WAAWE,M,+OCdhC,IAAMjD,EAAUC,IAAOC,IAAV,K,SCNAiD,EAAQ,CACnB,CAAEC,MAAO,QAASzD,KAAM,+BAAgC0D,KAAM,M,4+BCKhE,IAAMrD,EAAUC,IAAOC,IAAV,KAQPoD,EAAQrD,IAAOC,IAAV,KAqBLqD,EAActD,IAAOC,IAAV,KC/BJsD,EAAS,CACpB,CACEC,KAAM,IACNC,URDgB,SAACnB,GAAW,IACtBoB,EAAUpB,EAAVoB,MACR,OAAO,gBAAC3D,EAAD,KAAU4D,YAAaD,EAAMH,WQAlCA,OAAQ,CACN,CACEC,KAAM,IACNI,OAAO,EACPH,UHIY,WAClB,OACE,kBAAC,EAAD,CAAcR,YAAa,CAAEtD,KAAM,WAAYkD,GAAI,WACjD,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQlD,KAAK,mDGRnB,CACE6D,KAAM,SACNI,OAAO,EACPH,UDoCgB,WACtB,OACE,kBAAC,EAAD,CAAcR,YAAa,CAAEtD,KAAM,eAAgBkD,GAAI,MACrD,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAKgB,OAAQ,CAAC,GAAI,KAChB,kBAAC,IAAD,KACE,kBAACR,EAAD,KACE,yBAAKP,UAAU,cAAf,gGAKF,kBAACQ,EAAD,KACGJ,EAAMY,KAAI,WAAwB9C,GAAO,IAA5BmC,EAA2B,EAA3BA,MAAOzD,EAAoB,EAApBA,KAAoB,EAAd0D,KACzB,OACE,kBAAC,IAAD,CAAKW,KAAM,GACT,kBAAC,IAAD,CACEjB,UAAU,QACVK,MAAOA,EACPa,IAAKhD,EACLiD,UAAU,GAETvE,kBEzDRwE,EATH,WACV,OACE,kBAAC,IAAD,CAAe3B,MAAO9C,GACpB,kBAACI,EAAD,MACA,kBAAC,IAAD,KAAgB8D,YAAaJ,MCDfY,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DCZNC,IAAStD,OACP,kBAAC,IAAMuD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6cf64ef2.chunk.js","sourcesContent":["export const darkTheme = {\n  body: \"#50345B\",\n  //   text: \"#3F7E79\",\n  text: \"#EDB848\",\n  lightText: \"#ffde99\",\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: #50345B;\n    /* color: #3F7E79; */\n    color: #EDB848;\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n    font-family: 'Courier New', Courier, monospace\n  }`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { renderRoutes } from \"react-router-config\";\n\nconst Wrapper = styled.div``;\n\nexport const Main = (props) => {\n  const { route } = props;\n  return <Wrapper>{renderRoutes(route.routes)}</Wrapper>;\n};\n","import React, { useRef, useEffect } from \"react\";\n\nexport const Circle = ({ text }) => {\n  let ref = useRef();\n  useEffect(() => {\n    let canvas = ref.current;\n    let ctx = canvas.getContext(\"2d\");\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    let requestID,\n      i = 0;\n    const render = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.arc(\n        canvas.width / 2,\n        canvas.height / 2,\n        (canvas.width / 1.7) * Math.abs(Math.cos(i)),\n        0,\n        2 * Math.PI\n      );\n      ctx.fillStyle = \"#27182e\";\n      ctx.fill();\n      ctx.font = \"24px Courier New\";\n      ctx.fillStyle = \"#50345B\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n      ctx.fillText(\"\", canvas.width / 2, canvas.height / 2 + 50);\n\n      i += 0.005;\n      requestID = requestAnimationFrame(render);\n    };\n    render();\n    return () => {\n      cancelAnimationFrame(requestID);\n    };\n  });\n\n  return (\n    <>\n      <canvas\n        ref={ref}\n        style={{ position: \"absolute\", top: \"0px\", left: \"0px\" }}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled, { withTheme } from \"styled-components\";\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: ${(props) => props.theme.text};\n\n  &:focus,\n  &:visited,\n  &:link,\n  &:active {\n    text-decoration: none;\n  }\n  &:hover {\n    color: ${(props) => props.theme.lightText};\n  }\n`;\n\nexport default withTheme((props) => <StyledLink {...props} />);\n","import React from \"react\";\nimport { Layout, Button } from \"antd\";\nimport styled from \"styled-components\";\nimport StyledLink from \"../components/StyledLink\";\n\nconst { Header: AntHeader } = Layout;\n\nconst StyledHeader = styled(AntHeader)`\n  display: flex;\n  margin: 0 30px 0 30px;\n  justify-content: space-between;\n  padding: 0;\n  line-height: 75px;\n  height: fit-content;\n\n  @media (max-width: 500px) {\n    line-height: 30px;\n  }\n\n  .page-title {\n    display: flex;\n    font-size: 24px;\n    font-weight: 400;\n    margin: 0 30px;\n  }\n\n  .nav-item {\n    padding: 0 15px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  box-shadow: 0 2px 8px #392442;\n  z-index: 1;\n`;\n\nexport const Header = ({ text, to }) => {\n  return (\n    <Wrapper>\n      <StyledHeader>\n        <h1 className=\"page-title\">Animated</h1>\n        <StyledLink className=\"page-title\" to={to}>\n          {text}\n        </StyledLink>\n      </StyledHeader>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Header } from \"./Header\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-height: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n\n  .content {\n    flex: 1 0 auto;\n  }\n`;\n\nconst PublicLayout = ({ children, headerProps }) => {\n  return (\n    <Wrapper>\n      <Header {...headerProps} />\n      <div className=\"content\">{children}</div>\n    </Wrapper>\n  );\n};\n\nexport default PublicLayout;\n","import React from \"react\";\nimport { Circle } from \"../Circle\";\nimport PublicLayout from \"../themes/PublicLayout\";\nimport { Row, Col } from \"antd\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1 0 auto;\n`;\n\nexport const Home = () => {\n  return (\n    <PublicLayout headerProps={{ text: \"Demos ->\", to: \"/demos\" }}>\n      <Wrapper>\n        <Row>\n          <Col>\n            <Circle text=\"an exploration of algorithms...animated!\" />\n          </Col>\n        </Row>\n      </Wrapper>\n    </PublicLayout>\n  );\n};\n","export const demos = [\n  { title: \"Hello\", body: \"This is a card about nothing\", href: \"#\" },\n];\n","import React from \"react\";\nimport PublicLayout from \"../themes/PublicLayout\";\nimport { Row, Col, Card } from \"antd\";\nimport styled from \"styled-components\";\nimport { demos } from \"../Demos/Demos\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  flex: 1 0 auto;\n`;\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  margin: 50px 0;\n\n  .title-text {\n    text-align: center;\n    @media (max-width: 900px) {\n      max-width: 500px;\n    }\n    @media (max-width: 400px) {\n      max-width: 300px;\n    }\n    @media (max-width: 200px) {\n      max-width: 150px;\n    }\n    max-width: 800px;\n  }\n`;\nconst CardWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  flex-direction: row;\n  align-items: center;\n  flex: 1 0 auto;\n  margin: 30px 0;\n\n  .cards {\n    max-width: 200px;\n    min-height: 200px;\n    padding: 30px;\n    background: #27182e;\n    border-radius: 8px;\n  }\n`;\n\nexport const DemoList = () => {\n  return (\n    <PublicLayout headerProps={{ text: \"<- Back Home\", to: \"/\" }}>\n      <Wrapper>\n        <Row gutter={[24, 24]}>\n          <Col>\n            <Title>\n              <div className=\"title-text\">\n                Hello! I'm learning about pathfinding and procedural generation\n                through animation. Join me!\n              </div>\n            </Title>\n            <CardWrapper>\n              {demos.map(({ title, body, href }, i) => {\n                return (\n                  <Col span={6}>\n                    <Card\n                      className=\"cards\"\n                      title={title}\n                      key={i}\n                      bordered={true}\n                    >\n                      {body}\n                    </Card>\n                  </Col>\n                );\n              })}\n            </CardWrapper>\n          </Col>\n        </Row>\n      </Wrapper>\n    </PublicLayout>\n  );\n};\n\n// 50345b\n","import { Main } from \"./Main\";\nimport { Home } from \"./Views/Home\";\nimport { DemoList } from \"./Views/DemoList\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    component: Main,\n    routes: [\n      {\n        path: \"/\",\n        exact: true,\n        component: Home,\n      },\n      {\n        path: \"/demos\",\n        exact: true,\n        component: DemoList,\n      },\n    ],\n  },\n];\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./themes/theme\";\nimport { GlobalStyle } from \"./themes/global\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { renderRoutes } from \"react-router-config\";\nimport { routes } from \"./routes\";\n// import \"../src/styles/antd.css\";\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <GlobalStyle />\n      <BrowserRouter>{renderRoutes(routes)}</BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Row, Col } from \"antd\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}